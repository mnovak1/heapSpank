#The interval (in seconds) at which jmap -histo is invoked.
org.heapspank.jmap.histo.interval.seconds=5

#If true, jmap -hiso is passed the '-live' parameter, 
#which forces a full GC with every jmap -histo run.
#Using true will identify leak suspects more quickly & accurately, but will incur extra GC overhead.  
org.heapspank.jmap.histo.live=false

#A 'window' is a group of jmap -histo 'runs', and this parameter defines the number of runs per window.
#A larger value (more runs per window) provides results with higher confidence.
#A smaller value provides results quicker.
#See com.github.eostermueller.heapspank.leakyspank.LeakySpankContext for how this is used.
org.heapspank.jmap.histo.count.per.window=4

#Count of the 'leakiest' classes promoted from each window 
#to an 'all time' list of leakest classes ever. 
org.heapspank.suspect.count.per.window=15

#Count of rows in main display, 1 row per class.
org.heapspank.display.row.count=15

org.heapspank.regex.exclusion.filter=

org.heapspank.screen.refresh.interval.seconds=1

org.heapspank.max.iterations=86000

org.heapspank.view.class=com.github.eostermueller.heapspank.leakyspank.console.DefaultView
org.heapspank.output.file=/home/mnovak/leak.txt
